What happens when you initialize a repository? Why do you need to do it?
1) When we initialize a repository, it creates a hidden .git folder which will contain the metadata related to the files within the
	repository once the files are committed.
2) It is required since git tracks the files in the repository with the help of this .git folder. It tells that now the files within this 
folder are now within a git repository. Hence git can start to track it and keep meta data related to the files.

How is the staging area different from the working directory and the repository? What value do you think it offers?
1) Git allows more control while committing changes to a repository from working directory. Since it is a good strategy to follow
	"One commit per logical change", Git lets you specifically tell what changes you would like to commit to the repository. 
2) It creates a staging area which lets you to add files with the changes to be committed. When ready to commit it lets you commit
and allows you to add a message for that one logical change.

How can you use the staging area to make sure you have one commit per logical change?
1) We can use the command "git commit --staged". This command tells you the difference between the files in the staging area and those
in the repository before commit. Here you can verify that you have one commit per logical change looking at the differences and also make
sure that these are the changes you definitely want to commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
1) Situations :
	a)When you would like to try out something in the code but not sure if it would work. Experimental purpose
	b)If you don't want to make functional changes but try performance of the code with a new set of libraries.
	c)If you want to run your application for a different language like Italian instead of English
2) Branches help create a replica of the master but does not affect the master on commit. One can use this replica for working on to try
something out without disturbing the master. It will be like to try a new branch and create commits and grow into different direction away
from the master but always can come back to the master file and also simultaneously work on improving master. The master version and the 
branch version can also be merged later in time if things fly :-P

How do the diagrams help you visualize the branch structure?
1) The diagrams can be displayed using "git log --graph --oneline". It lets you understand the reachability of the commits in various branches.
2) The diagram shows the parent of each commit
3) It also lets one find out which commit was used to create a branch
4) Lets you see which commits are in which branch

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
1)The result of merging branches together is that the new merged master commit now contains changes from both master and the branch.
2)The merge represented by the diagram lets you see what commit was used when the branch was started. It also lets you know the last commit
in the branch before the merge happened.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
1) Pros:
	a) Automatic merging lets you quickly merge two commits into one
	b) It easily combines the latest versions of both the master and the branch
	c) It takes the chore of going through files and comparing and deciding what to keep and what not to keep in the merged commit
2) Cons:
	a) Not always an automatic merge is possible
	b) Git's automatic merging only tells the differences in the two versions of the files. It cannot decide if the changes should be kept
	or not if its a complex decision. ex. If two developers implement the same function with the same name but in a different way. It will
	throw a conflict on merge.